{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Picker } from '@react-native-picker/picker';\nimport { showMessage } from \"react-native-flash-message\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { GetOrders, RoiCreatePerson, RoiGetDepartment } from \"../utils/Api\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2, TextLabel } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport Settings from \"../constants/Settings\";\nimport { RoiDeletePerson, RoiGetPeople } from \"../utils/Api\";\nimport { NetInfoCellularGeneration } from '@react-native-community/netinfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function OrderScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    orderItems = _React$useState2[0],\n    setOrderItems = _React$useState2[1];\n  React.useEffect(refreshOrderItemsList, []);\n  function refreshOrderItemsList() {\n    console.log(\"refresh person list\");\n    GetOrders(\"1\").then(function (data) {\n      setOrderItems(data.OrderItems);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showViewMenuItem(menuItem) {\n    props.navigation.navigate(\"ViewMenuItem\", {\n      id: menuItem.id\n    });\n  }\n  function showOrderList(menuItem) {\n    props.navigation.navigate(\"Order\", {\n      id: menuItem.id\n    });\n  }\n  function deletePerson(_x) {\n    return _deletePerson.apply(this, arguments);\n  }\n  function _deletePerson() {\n    _deletePerson = _asyncToGenerator(function* (person) {\n      displayDangerConnectionMessage();\n      if (!(yield NetInfo.fetch()).isConnected) return;\n      PopupOkCancel(\"Delete person?\", `Are you sure you want to delete ${person.name}?`, function () {\n        RoiDeletePerson(person.id).then(function (data) {\n          PopupOk(\"Person deleted\", ` ${person.name} has been deleted.`);\n          refreshPersonList();\n        }).catch(function (error) {\n          PopupOk(\"Error\", error);\n        });\n      }, function () {});\n    });\n    return _deletePerson.apply(this, arguments);\n  }\n  function displayConnectionMessage() {\n    NetInfo.fetch().then(function (status) {\n      if (!status.isConnected) {\n        showMessage({\n          message: \"No  internet connection\",\n          description: \"You will only see cached data until you \\nhave an active internet connection again.\",\n          type: \"warning\",\n          duration: 5000,\n          floating: true,\n          icon: \"warning\",\n          autoHide: true\n        });\n      }\n    });\n  }\n  function displayOrderItems() {\n    displayConnectionMessage();\n    if (!orderItems) return;\n    return orderItems.map(function (o) {\n      var _o$menuItem$price;\n      return _jsxs(View, {\n        style: Styles.personListItem,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            style: Styles.personListItemName,\n            children: o.menuItem.name\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: (_o$menuItem$price = o.menuItem.price) != null ? _o$menuItem$price : \"---\"\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: o.menuItem.description\n          })]\n        }), _jsxs(View, {\n          style: Styles.personListItemButtons,\n          children: [_jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(MyButton, {\n              text: \"+\",\n              type: \"default\",\n              size: \"small\",\n              buttonStyle: Styles.personListItemButton,\n              textStyle: Styles.personListItemButtonText,\n              onPress: function onPress() {\n                return showOrderList(p);\n              }\n            }), _jsx(TextInput, {\n              value: 0,\n              style: Styles.textInput\n            }), _jsx(MyButton, {\n              text: \"-\",\n              type: \"default\",\n              size: \"small\",\n              buttonStyle: Styles.personListItemButton,\n              textStyle: Styles.personListItemButtonText,\n              onPress: function onPress() {\n                return showOrderList(p);\n              }\n            })]\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            onPress: function onPress() {\n              return deletePerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, o.menuItem.id);\n    });\n  }\n  return _jsx(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Your order list\"\n      }), _jsx(View, {\n        style: Styles.personList,\n        children: displayOrderItems()\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","TextInput","SafeAreaView","Picker","showMessage","NetInfo","GetOrders","RoiCreatePerson","RoiGetDepartment","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextH2","TextLabel","Styles","MyButton","Settings","RoiDeletePerson","RoiGetPeople","NetInfoCellularGeneration","jsx","_jsx","jsxs","_jsxs","OrderScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","orderItems","setOrderItems","useEffect","refreshOrderItemsList","console","log","then","data","OrderItems","catch","error","showViewMenuItem","menuItem","navigation","navigate","id","showOrderList","deletePerson","_x","_deletePerson","apply","arguments","_asyncToGenerator","person","displayDangerConnectionMessage","fetch","isConnected","name","refreshPersonList","displayConnectionMessage","status","message","description","type","duration","floating","icon","autoHide","displayOrderItems","map","o","_o$menuItem$price","style","personListItem","children","personListItemDetails","personListItemName","personListItemText","price","personListItemButtons","formRow","text","size","buttonStyle","personListItemButton","textStyle","personListItemButtonText","onPress","p","value","textInput","safeAreaView","container","contentContainerStyle","contentContainer","marginTop","personList"],"sources":["C:/Diploma Project Indivisual/BeanSceneProject/BeanSceneMobileApp/MobileAppUI/screens/OrderScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView, TextInput } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport {Picker} from '@react-native-picker/picker';\n\nimport { showMessage } from \"react-native-flash-message\";\nimport NetInfo from \"@react-native-community/netinfo\";\n\n// Import helper code\nimport { GetOrders, RoiCreatePerson, RoiGetDepartment } from '../utils/Api';\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextH2, TextLabel } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\n\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiDeletePerson, RoiGetPeople } from '../utils/Api';\n\n// Import styling and components\n\nimport { NetInfoCellularGeneration } from '@react-native-community/netinfo';\n\n\nexport default function OrderScreen(props) {\n\n\n  // State - data for this component\n\n  // Data array, default to empty array\n  const [orderItems, setOrderItems] = React.useState([])\n\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  //use effect is used to call method on page refresh(load)\n  React.useEffect(refreshOrderItemsList, [])\n\n  // Refresh the person list data - call the API\n  function refreshOrderItemsList() {\n\n    console.log(\"refresh person list\")\n\n    //const orderId = props.route.params.id\n\n    // Get data from the API\n    GetOrders(\"1\")\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setOrderItems(data.OrderItems)\n      })\n      // Error\n      .catch(error => {\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n  }\n\n  // function showAddPerson() {\n\n  //   props.navigation.navigate(\"AddPerson\")\n\n  // }\n\n  function showViewMenuItem(menuItem) {\n\n    //Navigate to view person and pass person id as param\n    props.navigation.navigate(\"ViewMenuItem\", { id: menuItem.id })\n\n  }\n\n  function showOrderList(menuItem) {\n\n    //Navigate to view person and pass person id as param\n    props.navigation.navigate(\"Order\", { id: menuItem.id })\n\n  }\n\n\n\n  //Delete Person\n  //@param {Person} Person\n\n  async function deletePerson(person) {\n\n    \n    //Display flash message when there is a connection issue\n    displayDangerConnectionMessage()\n    \n    //cancel if no internet connection \n    if(!(await NetInfo.fetch()).isConnected)return\n\n    PopupOkCancel(\n      \"Delete person?\",\n      `Are you sure you want to delete ${person.name}?`,\n      () => {\n\n        //console.log(\"OK...deleting person\")\n        RoiDeletePerson(person.id)\n          .then(data => {\n\n            PopupOk(\"Person deleted\", ` ${person.name} has been deleted.`)\n            refreshPersonList()\n\n\n          })\n\n\n          .catch(error => {\n\n            PopupOk(\"Error\", error)\n          })\n\n      },\n\n      //cancel do nothing\n      () => {\n\n        //console.log(\"Cancel-no delete for you\")\n      }\n\n    )\n  }\n\n\n\n  //Display flash message banner if offline\n  function displayConnectionMessage() {\n    //Get Network connection status\n    NetInfo.fetch().then(status => {\n      //check if not connected to the internet\n      if (!status.isConnected) {\n        // if(true){\n        //Display the flash message\n        showMessage({\n\n          message: \"No  internet connection\",\n          description: \"You will only see cached data until you \\nhave an active internet connection again.\",\n          type: \"warning\",\n          duration: 5000,\n          floating: true,\n          icon: \"warning\",\n          autoHide: true,\n        })\n      }\n    })\n  }\n\n\n  // Display all people data\n  function displayOrderItems() {\n    //Display flash message when there's connection issue\n    displayConnectionMessage()\n\n\n    if (!orderItems) return\n\n    // Loop through each item and turn into appropriate output and then return the result\n    return orderItems.map(o => {\n\n      // Create an output view for each item\n      return (\n        <View key={o.menuItem.id} style={Styles.personListItem}>\n          <View style={Styles.personListItemDetails}>\n            <TextParagraph style={Styles.personListItemName}>{o.menuItem.name}</TextParagraph>\n            <TextParagraph style={Styles.personListItemText}>{o.menuItem.price ?? \"---\"}</TextParagraph>\n\n            <TextParagraph style={Styles.personListItemText}>{o.menuItem.description}</TextParagraph>\n          </View>\n          <View style={Styles.personListItemButtons}>\n\n            {/* <MyButton\n              text=\"View Menu Item\"\n              type=\"major\"      // default*|major|minor\n              size=\"small\"      // small|medium*|large\n              //onPress={showAddPerson}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n              onPress={() => showViewMenuItem(p)}\n            /> */}\n\n\n            \n\n            <View style={Styles.formRow}>\n            <MyButton\n              text=\"+\"\n              type=\"default\"      // default*|major|minor\n              size=\"small\"      // small|medium*|large\n              //onPress={showAddPerson}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n              onPress={() => showOrderList(p)}\n            />\n            <TextInput value={0} style={Styles.textInput}/>\n            <MyButton\n              text=\"-\"\n              type=\"default\"      // default*|major|minor\n              size=\"small\"      // small|medium*|large\n              //onPress={showAddPerson}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n              onPress={() => showOrderList(p)}\n            />\n              </View>\n\n\n            <MyButton\n              text=\"Delete\"\n              type=\"minor\"      // default*|major|minor\n              size=\"small\"      // small|medium*|large\n              onPress={() => deletePerson(p)}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n            />\n\n\n\n\n\n\n          </View>\n        </View>\n      )\n\n    })\n\n  }\n\n\n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n\n      {/* <View style={Styles.personButtonContainer}>\n        <MyButton\n          text=\"+ Add new person\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton\n          text=\"Refresh\"\n          type=\"default\"    // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={refreshPersonList}\n        />\n      </View> */}\n\n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\n\n        <TextH1 style={{ marginTop: 0 }}>Your order list</TextH1>\n\n        <View style={Styles.personList}>\n          {displayOrderItems()}\n        </View>\n\n      </ScrollView>\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}