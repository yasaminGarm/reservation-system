{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Picker } from '@react-native-picker/picker';\nimport { showMessage } from \"react-native-flash-message\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { EditOrder, GetOrders, updateReservationStatus, DeleteOrderItem } from \"../utils/Api\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2, TextLabel } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { GetTables } from \"../utils/Api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function OrderScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    orderItems = _React$useState2[0],\n    setOrderItems = _React$useState2[1];\n  var _React$useState3 = React.useState(),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    tableName = _React$useState4[0],\n    setTableName = _React$useState4[1];\n  var _React$useState5 = React.useState(),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    tableId = _React$useState6[0],\n    setTableId = _React$useState6[1];\n  var _React$useState7 = React.useState([]),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    tables = _React$useState8[0],\n    setTables = _React$useState8[1];\n  var _React$useState9 = React.useState(),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    totalPrice = _React$useState10[0],\n    setTotalPrice = _React$useState10[1];\n  var _React$useState11 = React.useState(),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    reservationNumber = _React$useState12[0],\n    setReservationNumber = _React$useState12[1];\n  React.useEffect(refreshOrderItemsList, []);\n  React.useEffect(refreshTableList, []);\n  function refreshOrderItemsList() {\n    var _props$route$params$t, _props$route, _props$route$params, _props$route$params$t2, _props$route2, _props$route2$params, _props$route3, _props$route3$params;\n    console.log(\"refresh order list\");\n    var tableId = (_props$route$params$t = (_props$route = props.route) == null ? void 0 : (_props$route$params = _props$route.params) == null ? void 0 : _props$route$params.tableId) != null ? _props$route$params$t : 1;\n    setTableId(tableId);\n    setTableName((_props$route$params$t2 = (_props$route2 = props.route) == null ? void 0 : (_props$route2$params = _props$route2.params) == null ? void 0 : _props$route2$params.tableName) != null ? _props$route$params$t2 : \"M1\");\n    setReservationNumber((_props$route3 = props.route) == null ? void 0 : (_props$route3$params = _props$route3.params) == null ? void 0 : _props$route3$params.reservationId);\n    getOrdersByTableId(tableId);\n  }\n  function getOrdersByTableId(tableId) {\n    GetOrders(tableId).then(function (data) {\n      setOrderItems(data.orderItems);\n      setOrderTotalPrice(data.orderItems);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get order from the server\");\n    });\n  }\n  function Delete(_x) {\n    return _Delete.apply(this, arguments);\n  }\n  function _Delete() {\n    _Delete = _asyncToGenerator(function* (orderItem) {\n      if (!(yield NetInfo.fetch()).isConnected) return;\n      PopupOkCancel(\"Delete item?\", `Are you sure you want to delete ${orderItem.menuItem.name}?`, function () {\n        DeleteOrderItem(tableId, orderItem.id).then(function (data) {\n          PopupOk(\"Item deleted\", ` ${orderItem.menuItem.name} has been deleted.`);\n          getOrdersByTableId(tableId);\n        }).catch(function (error) {\n          PopupOk(\"Error\", error);\n        });\n      }, function () {});\n    });\n    return _Delete.apply(this, arguments);\n  }\n  function refreshTableList() {\n    console.log(\"refresh table list\");\n    GetTables().then(function (data) {\n      setTables(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get tables from the server\");\n    });\n  }\n  function displayConnectionMessage() {\n    NetInfo.fetch().then(function (status) {\n      if (!status.isConnected) {\n        showMessage({\n          message: \"No  internet connection\",\n          description: \"You will only see cached data until you \\nhave an active internet connection again.\",\n          type: \"warning\",\n          duration: 5000,\n          floating: true,\n          icon: \"warning\",\n          autoHide: true\n        });\n      }\n    });\n  }\n  function UpdateQuanity(_x2, _x3) {\n    return _UpdateQuanity.apply(this, arguments);\n  }\n  function _UpdateQuanity() {\n    _UpdateQuanity = _asyncToGenerator(function* (o, isIncrement) {\n      var newOrderItem = orderItems.find(function (orderItem) {\n        return orderItem.id == o.id;\n      });\n      var newOrderItems = [];\n      if (isIncrement == true) {\n        newOrderItem.qty = newOrderItem.qty + 1;\n      } else {\n        newOrderItem.qty = newOrderItem.qty - 1;\n      }\n      orderItems.forEach(function (orderItem) {\n        if (orderItem.id == newOrderItem.id) {\n          newOrderItems.push(newOrderItem);\n        } else {\n          newOrderItems.push(orderItem);\n        }\n      });\n      setOrderItems(newOrderItems);\n      setOrderTotalPrice(newOrderItems);\n      yield EditOrder(tableId, newOrderItems);\n    });\n    return _UpdateQuanity.apply(this, arguments);\n  }\n  function displayTables() {\n    return tables == null ? void 0 : tables.map(function (table) {\n      return _jsx(Picker.Item, {\n        label: table.name,\n        value: table.id\n      }, table.id);\n    });\n  }\n  function handleChangeTable(tableId) {\n    setTableId(tableId);\n    var table = tables.find(function (t) {\n      return t.id == tableId;\n    });\n    setTableName(table.name);\n    getOrdersByTableId(tableId);\n  }\n  function setOrderTotalPrice(orderItems) {\n    var SumPrice = 0;\n    for (var i = 0; i < orderItems.length; i++) {\n      SumPrice = Number(orderItems[i].menuItem.price) * Number(orderItems[i].qty) + SumPrice;\n    }\n    setTotalPrice(SumPrice);\n  }\n  function UpdateNote(o, text) {\n    var newOrderItems = orderItems.map(function (item) {\n      return item.menuItem.id === o.menuItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n        notes: text\n      }) : item;\n    });\n    setOrderItems(newOrderItems);\n    EditOrder(tableId, newOrderItems);\n  }\n  function completeOrder() {\n    updateReservationStatus(reservationNumber, 'Completed');\n  }\n  function displayOrderItems() {\n    displayConnectionMessage();\n    if (!orderItems) return;\n    return orderItems.map(function (o) {\n      var _o$qty;\n      return _jsx(View, {\n        style: Styles.personListItem,\n        children: _jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            style: Styles.personListItemName,\n            children: o.menuItem.name\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: `$ ${o.menuItem.price}`\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: (_o$qty = o.qty) != null ? _o$qty : \"1\"\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: o.menuItem.description\n          }), _jsx(TextInput, {\n            placeholder: \"Add a note\",\n            value: o.notes,\n            onChangeText: function onChangeText(text) {\n              UpdateNote(o, text);\n            },\n            style: Styles.textInput\n          }), _jsxs(View, {\n            style: Styles.OrderQuantityRow,\n            children: [_jsx(MyButton, {\n              text: \"+\",\n              type: \"minor\",\n              size: \"small\",\n              buttonStyle: Styles.updateQuantity,\n              textStyle: Styles.personListItemButtonText,\n              onPress: function onPress() {\n                return UpdateQuanity(o, true);\n              }\n            }), _jsx(TextInput, {\n              value: o.qty,\n              style: Styles.textInput\n            }), _jsx(MyButton, {\n              text: \"-\",\n              type: \"minor\",\n              size: \"small\",\n              buttonStyle: Styles.updateQuantity,\n              textStyle: Styles.personListItemButtonText,\n              onPress: function onPress() {\n                return UpdateQuanity(o, false);\n              }\n            })]\n          }, o.menuItem.id), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            onPress: function onPress() {\n              return Delete(o);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })\n      }, o.menuItem.id);\n    });\n  }\n  return _jsx(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Your order list\"\n      }), _jsxs(View, {\n        style: Styles.formRow,\n        children: [_jsx(TextLabel, {\n          children: \"Tables:\"\n        }), _jsx(Picker, {\n          selectedValue: tableId,\n          onValueChange: handleChangeTable,\n          style: Styles.picker,\n          itemStyle: Styles.pickerItem,\n          children: displayTables()\n        })]\n      }), _jsxs(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: [\"Your table is: \", tableName]\n      }), _jsxs(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: [\"You are placing order for reservation number: \", reservationNumber]\n      }), _jsx(View, {\n        style: Styles.personList,\n        children: displayOrderItems()\n      }), _jsxs(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: [\"Your Total Price is: \", totalPrice]\n      }), _jsx(MyButton, {\n        text: \"Send to the Kitchen\",\n        type: \"major\",\n        size: \"large\",\n        onPress: function onPress() {\n          return completeOrder();\n        },\n        buttonStyle: Styles.personListItemButton,\n        textStyle: Styles.personListItemButtonText\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","TextInput","SafeAreaView","Picker","showMessage","NetInfo","EditOrder","GetOrders","updateReservationStatus","DeleteOrderItem","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextH2","TextLabel","Styles","MyButton","GetTables","jsx","_jsx","jsxs","_jsxs","OrderScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","orderItems","setOrderItems","_React$useState3","_React$useState4","tableName","setTableName","_React$useState5","_React$useState6","tableId","setTableId","_React$useState7","_React$useState8","tables","setTables","_React$useState9","_React$useState10","totalPrice","setTotalPrice","_React$useState11","_React$useState12","reservationNumber","setReservationNumber","useEffect","refreshOrderItemsList","refreshTableList","_props$route$params$t","_props$route","_props$route$params","_props$route$params$t2","_props$route2","_props$route2$params","_props$route3","_props$route3$params","console","log","route","params","reservationId","getOrdersByTableId","then","data","setOrderTotalPrice","catch","error","Delete","_x","_Delete","apply","arguments","_asyncToGenerator","orderItem","fetch","isConnected","menuItem","name","id","displayConnectionMessage","status","message","description","type","duration","floating","icon","autoHide","UpdateQuanity","_x2","_x3","_UpdateQuanity","o","isIncrement","newOrderItem","find","newOrderItems","qty","forEach","push","displayTables","map","table","Item","label","value","handleChangeTable","t","SumPrice","i","length","Number","price","UpdateNote","text","item","_objectSpread","notes","completeOrder","displayOrderItems","_o$qty","style","personListItem","children","personListItemDetails","personListItemName","personListItemText","placeholder","onChangeText","textInput","OrderQuantityRow","size","buttonStyle","updateQuantity","textStyle","personListItemButtonText","onPress","personListItemButton","safeAreaView","container","contentContainerStyle","contentContainer","marginTop","formRow","selectedValue","onValueChange","picker","itemStyle","pickerItem","personList"],"sources":["C:/Diploma Project Indivisual/BeanSceneProject/BeanSceneMobileApp/MobileAppUI/screens/OrderScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView, TextInput } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport {Picker} from '@react-native-picker/picker';\n\nimport { showMessage } from \"react-native-flash-message\";\nimport NetInfo from \"@react-native-community/netinfo\";\n\n// Import helper code\nimport { EditOrder, GetOrders, updateReservationStatus,DeleteOrderItem,  } from '../utils/Api';\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextH2, TextLabel } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\n\n// Import styling and components\nimport { GetTables } from '../utils/Api';\n\nexport default function OrderScreen(props) {\n\n\n  // State - data for this component\n\n  // Data array, default to empty array\n  const [orderItems, setOrderItems] = React.useState([])\n  const [tableName, setTableName] = React.useState()\n  const [tableId, setTableId] = React.useState()\n\n  const [tables, setTables] = React.useState([])\n  const [totalPrice, setTotalPrice] = React.useState()\n\n  const [reservationNumber, setReservationNumber] = React.useState()\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  //use effect is used to call method on page refresh(load)\n  React.useEffect(refreshOrderItemsList, [])\n\n  React.useEffect(refreshTableList, [])\n\n  // Refresh the person list data - call the API\n  function refreshOrderItemsList() {\n\n    console.log(\"refresh order list\")\n\n    //const orderId = props.route.params.id\n    const tableId = props.route?.params?.tableId??1\n    //screen go to other screen//we should have a param to go to order screen\n    setTableId(tableId)\n    setTableName(props.route?.params?.tableName??\"M1\")\n    //default M1\n    setReservationNumber(props.route?.params?.reservationId)\n    // Get data from the API\n    \n    getOrdersByTableId(tableId);\n\n  }\n\n\n  function getOrdersByTableId(tableId) {\n    GetOrders(tableId)\n    // Success\n    .then(data => {\n      // Store results in state variable\n      setOrderItems(data.orderItems)\n      setOrderTotalPrice(data.orderItems)\n    })\n    // Error\n    .catch(error => {\n      PopupOk(\"API Error\", \"Could not get order from the server\")\n    })\n  }\n\n\n\n  //Delete Order Item\n\n  async function Delete(orderItem) {\n\n    \n    //Display flash message when there is a connection issue\n   \n    \n    //cancel if no internet connection \n    if(!(await NetInfo.fetch()).isConnected)return\n\n    PopupOkCancel(\n      \"Delete item?\",\n      `Are you sure you want to delete ${orderItem.menuItem.name}?`,\n      () => {\n\n        //console.log(\"OK...deleting person\")\n        DeleteOrderItem(tableId,orderItem.id)\n          .then(data => {\n\n            PopupOk(\"Item deleted\", ` ${orderItem.menuItem.name} has been deleted.`)\n            getOrdersByTableId(tableId)\n          })\n          .catch(error => {\n\n            PopupOk(\"Error\", error)\n          })\n\n      },\n\n\n    \n\n      //cancel do nothing\n      () => {\n\n        //console.log(\"Cancel-no delete for you\")\n      }\n\n    )\n  }\n\n  function refreshTableList() {\n\n    console.log(\"refresh table list\")\n\n    // Get data from the API\n    GetTables()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setTables(data)\n        //setTableId(data[0].id)\n      })\n      // Error\n      .catch(error => {\n        PopupOk(\"API Error\", \"Could not get tables from the server\")\n      })\n\n  }\n\n  //Display flash message banner if offline\n  function displayConnectionMessage() {\n    //Get Network connection status\n    NetInfo.fetch().then(status => {\n      //check if not connected to the internet\n      if (!status.isConnected) {\n        // if(true){\n        //Display the flash message\n        showMessage({\n\n          message: \"No  internet connection\",\n          description: \"You will only see cached data until you \\nhave an active internet connection again.\",\n          type: \"warning\",\n          duration: 5000,\n          floating: true,\n          icon: \"warning\",\n          autoHide: true,\n        })\n      }\n    })\n  }\n\n\n  async function UpdateQuanity(o,isIncrement) {\n    var newOrderItem=orderItems.find(orderItem=>orderItem.id == o.id)\n    \n    let newOrderItems = [];\n\n    if(isIncrement==true)\n    {\n      newOrderItem.qty=newOrderItem.qty+1\n  \n    }\n    else\n    {\n      newOrderItem.qty=newOrderItem.qty-1\n    }\n\n\n    orderItems.forEach(orderItem => {\n   \n        if(orderItem.id == newOrderItem.id) {\n          newOrderItems.push(newOrderItem)\n        }\n        else {\n          newOrderItems.push(orderItem)\n        }\n\n    });\n\n    setOrderItems(newOrderItems)\n    setOrderTotalPrice(newOrderItems);\n    \n    await EditOrder(tableId, newOrderItems);\n    // Get data from the API\n    // EditOrder(orderId, newOrderItems)\n    //   // Success\n    //   .then(data => {\n    //     // Store results in state variable\n      \n    //   })\n    //   // Error\n    //   .catch(error => {\n    //     PopupOk(\"API Error\", \"Could not get department from the server\")\n    //   })\n\n  }\n\n  function displayTables() {\n    \n    return tables?.map(table => {\n        return <Picker.Item key={table.id} label={table.name} value={table.id} />\n      });    \n  }\n\n  function handleChangeTable(tableId) {\n    setTableId(tableId);\n    let table = tables.find(t => t.id == tableId)\n    setTableName(table.name);\n    getOrdersByTableId(tableId);\n  }\n\n  function setOrderTotalPrice(orderItems){\n    var SumPrice = 0\n    for (let i = 0; i < orderItems.length; i++) {\n     SumPrice = Number(orderItems[i].menuItem.price)* Number(orderItems[i].qty) + SumPrice\n    }\n    setTotalPrice(SumPrice)\n\n  }\n\n\n  function UpdateNote(o, text){\n    const newOrderItems = orderItems.map((item) =>\n            item.menuItem.id === o.menuItem.id ? { ...item, notes: text } : item\n          );\n      setOrderItems(newOrderItems);\n      EditOrder(tableId, newOrderItems);\n  }\n\n  function completeOrder() {\n    updateReservationStatus(reservationNumber, 'Completed')\n    //when press compeleted button changed the status compeleted\n  }\n\n  \n  // Display all people data\n  function displayOrderItems() {\n    //Display flash message when there's connection issue\n    displayConnectionMessage()\n\n\n    if (!orderItems) return\n\n    // Loop through each item and turn into appropriate output and then return the result\n    return orderItems.map(o => {\n\n      // Create an output view for each item\n      return (\n        <View key={o.menuItem.id} style={Styles.personListItem}>\n          <View style={Styles.personListItemDetails}>\n            <TextParagraph style={Styles.personListItemName}>{o.menuItem.name}</TextParagraph>\n            <TextParagraph style={Styles.personListItemText}>{`$ ${o.menuItem.price}`}</TextParagraph>\n            <TextParagraph style={Styles.personListItemText}>{o.qty??\"1\"}</TextParagraph>\n            <TextParagraph style={Styles.personListItemText}>{o.menuItem.description}</TextParagraph>\n\n            {/* ... Existing code ... */}\n            <TextInput\n                  placeholder=\"Add a note\"\n                  value={o.notes}\n                  onChangeText={(text) => {UpdateNote(o, text)}}\n                  style={Styles.textInput}\n            />\n            \n\n            \n            <View key={o.menuItem.id} style={Styles.OrderQuantityRow}>\n              <MyButton\n                text=\"+\"\n                type=\"minor\"      // default*|major|minor\n                size=\"small\"      // small|medium*|large\n          \n                //onPress={showAddPerson}\n                buttonStyle={Styles.updateQuantity}\n                textStyle={Styles.personListItemButtonText}\n                onPress={() => UpdateQuanity(o,true)}\n              />\n\n              <TextInput value={o.qty} style={Styles.textInput}/>\n\n              <MyButton\n                text=\"-\"\n                type=\"minor\"      // default*|major|minor\n                size=\"small\"      // small|medium*|large\n                //onPress={showAddPerson}\n                buttonStyle={Styles.updateQuantity}\n                textStyle={Styles.personListItemButtonText}\n                onPress={() => UpdateQuanity(o,false)}\n              />\n      \n            </View>\n\n            <MyButton\n              text=\"Delete\"\n              type=\"minor\"      // default*|major|minor\n              size=\"small\"      // small|medium*|large\n              onPress={() => Delete(o)}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n            />\n            </View>\n     \n        </View>\n      )\n\n    })\n\n  }\n\n\n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n\n      {/* <View style={Styles.personButtonContainer}>\n        <MyButton\n          text=\"+ Add new person\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton\n          text=\"Refresh\"\n          type=\"default\"    // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={refreshPersonList}\n        />\n      </View> */}\n\n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\n\n        <TextH1 style={{ marginTop: 0 }}>Your order list</TextH1>\n\n        <View style={Styles.formRow}>\n                <TextLabel>Tables:</TextLabel>\n                {/*<TextInput value={departmentId} onChangeText={setDepartmentId} style={Styles.textInput}/>*/}\n                <Picker \n                  selectedValue={tableId}\n                  onValueChange={handleChangeTable}\n                  style={Styles.picker}\n                  itemStyle={Styles.pickerItem}\n                >\n                  {displayTables()}\n                </Picker>\n        </View>\n\n        <TextH1 style={{ marginTop: 0 }}>Your table is: {tableName}</TextH1>\n        \n        <TextH1 style={{ marginTop: 0 }}>You are placing order for reservation number: {reservationNumber}</TextH1>\n       \n        <View style={Styles.personList}>\n          {displayOrderItems()}\n        </View>\n        \n        <TextH1 style={{ marginTop: 0 }}>Your Total Price is: {totalPrice}</TextH1>\n\n\n          <MyButton\n              text=\"Send to the Kitchen\"\n              type=\"major\"      // default*|major|minor\n              size=\"large\"      // small|medium*|large\n              onPress={() => completeOrder()}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n            />\n      </ScrollView>\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}